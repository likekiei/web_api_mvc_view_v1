// <auto-generated />
using System;
using Main_EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Main_EF.Migrations
{
    [DbContext(typeof(DbContext_Main))]
    partial class DbContext_MainModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Main_EF.Table.Companys", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactManJobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactManPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FileBindGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDefaultSelected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutsideBindKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibMan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnifiedNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GUID" }, "IX_001")
                        .IsUnique();

                    b.HasIndex(new[] { "No" }, "IX_002")
                        .IsUnique();

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("Main_EF.Table.ErrorLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("Main_EF.Table.FunctionCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FileBindGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FunctionCodeId")
                        .HasColumnType("int");

                    b.Property<string>("FunctionCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsStop")
                        .HasColumnType("bit");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutsideBindKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "GUID" }, "IX_001")
                        .IsUnique();

                    b.ToTable("FunctionCode");
                });

            modelBuilder.Entity("Main_EF.Table.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BindKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BindKey_ByAction")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<int>("DBTableId")
                        .HasColumnType("int");

                    b.Property<string>("DBTableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LogTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SEQ")
                        .HasColumnType("int");

                    b.Property<int>("StatusCodeId")
                        .HasColumnType("int");

                    b.Property<string>("StatusCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableKey_Main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Main_EF.Table.LoginStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BackDoorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BackDoorTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<int>("CompanyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionId_TXTs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBackDoor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedCheckPassword")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginFromTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LoginFromTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoginKeepDay")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestLastDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoginStatus");
                });

            modelBuilder.Entity("Main_EF.Table.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FileBindGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsStop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutsideBindKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GUID" }, "IX_001")
                        .IsUnique();

                    b.HasIndex(new[] { "CompanyId", "No" }, "IX_002")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Main_EF.Table.SimpleLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SimpleLog");
                });

            modelBuilder.Entity("Main_EF.Table.SystemTimestamp", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DailyStockDetailReport_FirstChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId");

                    b.ToTable("SystemTimestamp");
                });

            modelBuilder.Entity("Main_EF.Table.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("DeptId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FileBindGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsStop")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutsideBindKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Rem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdateManId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateManName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "GUID" }, "IX_001")
                        .IsUnique();

                    b.HasIndex(new[] { "CompanyId", "No" }, "IX_002")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Main_EF.Table._TestTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "No", "Name" }, "Index_1")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("_TestTemplate");
                });

            modelBuilder.Entity("Main_EF.Table.FunctionCode", b =>
                {
                    b.HasOne("Main_EF.Table.Companys", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Main_EF.Table.Role", "RoleInfo")
                        .WithMany("FunctionCodeList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfo");

                    b.Navigation("RoleInfo");
                });

            modelBuilder.Entity("Main_EF.Table.Role", b =>
                {
                    b.HasOne("Main_EF.Table.Companys", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyInfo");
                });

            modelBuilder.Entity("Main_EF.Table.SystemTimestamp", b =>
                {
                    b.HasOne("Main_EF.Table.Companys", "CompanyInfo")
                        .WithOne("SystemTimestampInfo")
                        .HasForeignKey("Main_EF.Table.SystemTimestamp", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInfo");
                });

            modelBuilder.Entity("Main_EF.Table.User", b =>
                {
                    b.HasOne("Main_EF.Table.Companys", "CompanyInfo")
                        .WithMany("UserList")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Main_EF.Table.Role", "RoleInfo")
                        .WithMany("UserList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyInfo");

                    b.Navigation("RoleInfo");
                });

            modelBuilder.Entity("Main_EF.Table.Companys", b =>
                {
                    b.Navigation("SystemTimestampInfo")
                        .IsRequired();

                    b.Navigation("UserList");
                });

            modelBuilder.Entity("Main_EF.Table.Role", b =>
                {
                    b.Navigation("FunctionCodeList");

                    b.Navigation("UserList");
                });
#pragma warning restore 612, 618
        }
    }
}
